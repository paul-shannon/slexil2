import flask
import os, io, traceback, pdb, time
from dash import html, Dash, callback, dcc, Input, Output, State, dash_table
import dash_bootstrap_components as dbc

dbcStyle = dbc.themes.BOOTSTRAP
styleSheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css', dbcStyle]

#--------------------------------------------------------------------------------
# the webapp requires a PROJECTS_DIRECTORY in the current working directory
# each individual project, one for each text, is created as a subdirectory here

PROJECTS_DIRECTORY = "PROJECTS"
try:
    assert(os.path.exists(PROJECTS_DIRECTORY))
except AssertionError:
    os.mkdir(PROJECTS_DIRECTORY)

#--------------------------------------------------------------------------------
def createProjectDirectory(projectName):

   path = os.path.join(PROJECTS_DIRECTORY, projectName)
   if not os.path.exists(path):
      os.mkdir(path)
   return path
      
#--------------------------------------------------------------------------------
app = flask.Flask(__name__)
dashApp = Dash(__name__, server=app, url_base_pathname='/',
               external_stylesheets=styleSheets)
 #              suppress_callback_exceptions=True)
dashApp.title = "webapp2"
#-------------------------------------------------------
# from  https://stackoverflow.com/a/76584117/
def get_exception_traceback_str(exc: Exception) -> str:


   file = io.StringIO()
   traceback.print_exception(exc, file=file)
   return file.getvalue().rstrip()

#-------------------------------------------------------
def createNavBar():

   navbar = dbc.NavbarSimple(
      id="navbar",
      children=[
        dbc.NavItem(html.Button("Examine State", id="examineStateButton", n_clicks=0,
                                className="enabledButton"))],
       brand="SLEXIL Webapp 2",
       color="#F5FAF3",
       dark=False,
       )

   return navbar

#-------------------------------------------------------
modalDiv = html.Div(
    [dbc.Modal([
         dbc.ModalHeader(dbc.ModalTitle("SLEXIL Notification",
                                        className="bodyStyle",
                                        id="modalTitle"),
                         close_button=True),
         dbc.ModalBody("", id='modalContents', className="bodyStyle"),
         ],
         id="slexilModal",
         centered=True,
         is_open=False,
         size="xl",    # sm, lg, xl
         fullscreen=False,
         scrollable=True
         )], className="bodyStyle")

#----------------------------------------------------------------------
def createLoadingSpinner():

   dcc.Loading(
       id="loadingSpinner",
       type="default",
       children=modalDiv
       )

#----------------------------------------------------------------------
dashApp.layout = html.Div(id="mainDiv",
   children=[createNavBar(),
             dcc.Store(id='memoryStore', storage_type='memory'),
             modalDiv,
             createLoadingSpinner(),
             ],className="bodyStyle")
#----------------------------------------------------------------------
# navbar button displays state in a modal dialog
@callback(
    Output('slexilModal', 'is_open', allow_duplicate=True),
    Output('modalTitle', 'children', allow_duplicate=True),
    Output('modalContents', 'children', allow_duplicate=True),
    Input('examineStateButton', 'n_clicks'),
    State('memoryStore', 'data'),
    prevent_initial_call=True
    )
def displayStateAsList(n_clicks, data):
    print("sleeping in display state")
    time.sleep(3)
    if data is None:
       return(True, "State Variables",
              html.P("state is empty, no variables yet assigned"))
    el = html.Ul(id="list", children=[])
    for key in data.keys():
       el.children.append(html.Li("%s: %s" % (key, data[key])))
    return True, "State Variables", el
#--------------------------------------------------------------------------------
# m4_include(shared.py)
# m4_include(setTitle.py)
# m4_include(loadEAF.py)

m4_include(23.analyzeEAF.py)

if __name__ == '__main__':
    port = 8081
    dashApp.run(host='0.0.0.0', debug=True, port=port)
